cpput是一个非常简单的C/C++单元测试框架，是我几年前的作品，后来陆陆续续做过修订，现在放出来，权当做个备份。
与其他C/C++单元测试框架特别是Google Test相比，cpput的功能可说是简陋，但易用性方面尚可一拼。对我自己而言，cpput已经够用了。未来除非是bugfix，否则不太可能进行开发了。
当然，如果客官有兴趣，不管是使用还是自行扩展，都无任欢迎:-)

cpput提供按组进行单元测试的机制。测试用例按组划分，自动注册，无需劳神。cpput提供了若干个宏来简化测试用例的编写，使用非常简单，具体可参考examples目录下的几个例子。

这些宏包括：
*GROUP         -- 必选。定义一个用例组，可以起一个组名，但名字必须唯一
*GROUP_BEGIN   -- 可选。如果定义了，每个用例组在执行第一个测试用例前，会执行这个
*GROUP_END     -- 可选。如果定义了，每个用例组在执行完最后一个测试用例后，会执行这个
*TEST_BEGIN    -- 可选。如果定义了，每个用例组在执行任一个测试用例前，会执行这个
*TEST_END      -- 可选。如果定义了，每个用例组在执行完任一个测试用例后，会执行这个
*TEST          -- 必选。定义每个测试用例，需提供一个序号，cpput会按序执行

简而言之，对于每个GROUP，cpput框架的执行顺序为：GROUP_BEGIN->(TEST_BEGIN->TEST1->TEST_END)->(TEST_BEGIN->TEST2->TEST_END)->...->GROUP_END

对于用例的校验，cpput仅提供了EXPECT和EXPECT_NOT，客官可以自行封装提供更便利之接口。
cpput对测试用例的执行情况做了一个简单的统计，会统计总的组数，成功的组数以及失败的组数。只要一个组里面有一个用例校验失败，则认为整个组是失败的。
同样的，cpput也对测试用例的执行进行了统计。

对于输出界面的几个错误原因，这里简单予以说明：
*AF -- EXPECT/EXPECT_NOT断言失败
*SE -- 捕获到std标准异常
*UE -- 捕获到未知异常
*CF -- GROUP_BEGIN执行失败
*DF -- GROUP_END执行失败
*GF -- 用例组执行失败，可能是其中某个或某些用例执行失败

欢迎使用！
